entity,defination
文件,-
基本文件操作,在Python中，内置了文件(File)对象。在使用文件对象时，首先需要通过内置的open()方法创建一个文件对象，然后通过该对象提供的方法进行一些基本文件操作。例如，可以使用文件对象的write()方法向文件中写入内容，以及使用close()方法关闭文件等。
创建文件,在Python中，想要操作文件需要先创建或者打开指定的文件并创建文件对象，可以通过内置的open()函数实现。
打开文件,在Python中，想要操作文件需要先创建或者打开指定的文件并创建文件对象，可以通过内置的open()函数实现。
关闭文件,打开文件后，需要及时关闭，以免对文件造成不必要的破坏。关闭文件可以使用文件对象的close()方法实现。
with语句,打开文件后，要及时将其关闭，如果忘记关闭可能会带来意想不到的问题。另外，如果在打开文件时抛出了异常，那么将导致文件不能被及时关闭。为了更好地避免此类问题发生，可以使用Python提供的with语句，从而实现在处理文件时，无论是否抛出异常，都能保证with语句执行完毕后关闭已经打开的文件。
写入文件,Python的文件对象提供了write()方法，可以向文件中写入内容。
读取文件,在Python中打开文件后，除了可以向其写入或追加内容，还可以读取文件中的内容。
目录,目录也称文件夹，用于分层保存文件。通过目录可以分门别类地存放文件。我们也可以通过目录快速找到想要的文件。
目录操作,在Python中，并没有提供直接操作目录的函数或者对象，而是需要使用内置的os和os.path模块实现。
os模块,在Python中，内置了os模块及其子模块os.path用于对目录或文件进行操作。在使用os模块或者os.path模块时，需要先应用import语句将其导入，然后才可以应用它们提供的函数或者变量。
os.path模块,在Python中，内置了os模块及其子模块os.path用于对目录或文件进行操作。在使用os模块或者os.path模块时，需要先应用import语句将其导入，然后才可以应用它们提供的函数或者变量。
路径,用于定位一个文件或者目录的字符串被称为一个路径。在程序开发时，通常涉及两种路径，一种是相对路径，另一种是绝对路径。
判断目录是否存在,在Python中，有时需要判断给定的目录是否存在，这时可以使用os.path模块提供的exists()函数实现。
创建目录,在Python中，os模块提供了两个创建目录的函数，一个用于创建一级目录，另一个用于创建多级目录。
删除目录,删除目录可以通过使用os模块提供的rmdir()函数实现。通过rmdir()函数删除目录时，删除的目录为空时才起作用。
遍历目录,遍历在汉语中的意思是全部走遍，到处周游。在Python中，遍历是将指定的目录下的全部目录(包括子目录)及文件访问一遍。在Python中，os模块的walk。函数用于实现遍历目录的功能。
删除文件,Python没有内置删除文件的函数，但是在内置的os模块中提供了删除文件的函数remove()。
重命名文件,os模块提供了重命名文件和目录的函数rename()，如果指定的路径是文件的，则重命名文件，如果指定的路径是目录，则重命名目录。
重命名目录,os模块提供了重命名文件和目录的函数rename()，如果指定的路径是文件的，则重命名文件，如果指定的路径是目录，则重命名目录。
获取文件基本信息,在计算机上创建文件后，该文件本身就会包含一些信息。例如，文件的最后一次访问时间、最后一次修改时间、文件大小等基本信息。通过os模块的stat()函数可以获取到文件的这些基本信息。
