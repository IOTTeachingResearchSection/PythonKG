entity,defination
字符串编码,最早的字符串编码是美国标准信息交换码，即ASCII码。它仅对10个数字、26个大写英文字母、26个小写英文字母及一些其他符号进行了编码。ASCII码最多只能表示256个符号，每个字符占一个字节。随着信息技术的发展，各国的文字都需要进行编码，于是岀现了GBK、GB2312、UTF-8编码等。其中GBK和GB2312是我国制定的中文编码标准，使用一个字节表示英文字母，2个字节表示中文字 符。而UTF-8是国际通用的编码，对全世界所有国家需要用到的字符都进行了编码。UTF-8釆用一个字节表示英文字符、3个字节表示中文。在Python 3.X中，默认采用的编码格式为UTF-8，采用这种编码有效地解决了中文乱码的问题。
encode,encode方法为str对象的方法，用于将字符串转换为二进制数据（即bytes)，也称为“编码”，存到磁盘上，就需要把str转换为字节类型，即 bytes类型。
decode,decode方法为bytes对象的方法用于将二进制数据转换为字符串，即将使用encode方法转换的结果再转换为字符串，也称为“解码”。
正则表达式,在处理字符串时，经常会有查找符合某些复杂规则的字符串的需求。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。对于接触过DOS的用户来说，如果想匹配当前文件夹下所有的文本文件，可以输入“dir *.txt”命令，按<Enter>键后，所有“.txt”文件将会被列出来。这里的“*.txt”即可理解为一个简单的正则表达式。
行定位符,行定位符就是用来描述字符串的边界，“^”表示行的开始，“$”表示行的结尾。该表达式表示要匹配字符串tm的开始位置是行头，如“tm equal Tomorrow Moon'“Tomorrow Moon equal tm”则不匹配。
元字符,-
限定符,-
字符类,-
排除字符,匹配不符合指定字符集合的字符串。正则表达式提供了“^”字符。这个元字符在5.3.1小节中出现过，表示行的开始。而这里将会放到方括号中，表示排除的意思。
选择字符,在上面的描述中，包含着条件选择的逻辑，这就需要使用选择字符（|）来实现。该字符可以理解为“或”。
转义字符,正则表达式中的转义字符（\）和Python中的大同小异，都是将特殊字符(如“.”“?”“\”等)变为普通的字符。
分组,小括号字符的第一个作用就是可以改变限定符的作用范围，如“|”“*”“^”等。小括号的第二个作用是分组，也就是子表达式。
re模块,Python提供了re模块，用于实现正则表达式的操作。在实现时，可以使用re模块提供的方法（如search()、match()、findall()等）进行字符串处理，也可以先使用re模块的 compile()方法将模式字符串转换为正则表达式对象，然后再使用该正则表达式对象的相关方法来操作字符串。
