面向对象程序设计,面向对象程序设计是在面向过程程序设计的基础上发展而来的，它比面向过程编程具有更强的灵活性和扩展性。面向对象程序设计也是一个程序员发展的“分水岭”，很多的初学者和略有成就的开发者，就是因为无法理解“面向对象”而放弃。这里想提醒一下初学者：要想在编程这条路上走得比别人远，就一定要掌握面向对象编程技术。
面向对象,面向对象的英文缩写是OO，它是一种设计思想。从20世纪60年代提出面向对象的概念到现在，它己经发展成为一种比较成熟的编程思想，并且逐步成为目前软件开发领域的主流技术。如我们经常听说的面向对象编程就是主要针对大型软件设计而提岀的，它可以使软件设计更加灵活，并且能更好地进行代码复用。
对象,对象，是一个抽象概念，英文称作“Object”，表示任意存在的事物。世间万物皆对象！现实世界中，随处可见的一种事物就是对象，对象是事物存在的实体，如一个人。
类,类是封装对象的属性和行为的载体，反过来说具有相同属性和行为的一类实体被称为类。
定义类,在python中，类的定义使用class关键字来实现。
类的实例,在类定义完成以后，可以创建类的实例，即实例化。
__init__,该方法是一个特殊的方法，类似java语言中的构造方法。每当创建一个类的新实例时python都会自动执行它。
类的成员,类的成员主要由实例方法和数据成员组成。在类中创建了类的成员后，可以通过类的实例进行访问。
访问限制,在类的内部可以定义属性和方法，而在类的外部则可以直接调用属性或方法来操作数据，从而隐藏了类内部的复杂逻辑。但是python并没有对属性和方法的访问权限进行限制。为了保证类内部的某些属性或方法不被外部所访问，可以在属性或方法名前面添加单下划线（_foo）、双下划线（__foo）或首尾加双下划线（__foo__），从而限制访问权限。
用于计算的属性,在Python中，可以通过@property（装饰器）将一个方法转换为属性，从而实现用于计算的属性。将方法转换为属性后，可以直接通过方法名来访问方法，而不需要再添加一对小括号“（）”，这样可以让代码更加简洁。
属性安全保护机制,在Python中，默认情况下，创建的类属性或者实例是可以在类体外进行修改的，如果想要限制其不能在类体外修改，可以将其设置为私有的，但设置为私有后，在类体外也不能获取它的值。如果想要创建一个可以读取但不能修改的属性，那么可以使用@property实现只读属性。
继承,继承是面向对象编程最重要的特性之一，它源于人们认识客观世界的过程，是自然界普遍存在的一种现象。例如，我们每一个人都从祖辈和父母那里继承了一些体貌特征，但是每个人却又不同于父母，因为每个人都存在自己的一些特性，这些特性是独有的，在父母身上并没有体现。在程序设计中实现继承，表示这个类拥有它继承的类的所有公有成员或者受保护成员。在面向对象编程中，被继承的类称为父类或基类，新的类称为子类或派生类。
方法重写,基类的成员都会被派生类继承，当基类中的某个方法不完全适用于派生类时，就需要在派生类中重写父类的这个方法，这和Java语言中的方法重写是一样的。
OO,-
